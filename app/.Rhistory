}
nrow(bg)
bg%<>%summarise(meanPopd=mean(POP15DEN,na.rm=TRUE),meanPopc=mean(PCTPOPCHA,na.rm=TRUE))#%>%summarise(meanPopc=mean(PCTPOPCHA,na.rm=TRUE))%>%arrange(desc(meanPop))
bg<-bg%>%summarise(meanPopd=mean(POP15DEN,na.rm=TRUE),meanPopc=mean(PCTPOPCHA,na.rm=TRUE))#%>%summarise(meanPopc=mean(PCTPOPCHA,na.rm=TRUE))%>%arrange(desc(meanPop))
bg1<-bg%>%summarise(meanPopd=mean(POP15DEN,na.rm=TRUE),meanPopc=mean(PCTPOPCHA,na.rm=TRUE))#%>%summarise(meanPopc=mean(PCTPOPCHA,na.rm=TRUE))%>%arrange(desc(meanPop))
sel<-c("2","1","3","6","4","11")
all<-3
if(all=="11"){
bg<-blockgroups1@data%>%group_by(CL11)
}else{
bg<-subset(blockgroups1@data,CL11%in%sel)%>%group_by(CL11)
}
nrow(bg)
bg1<-bg%>%summarise(meanPopd=mean(POP15DEN,na.rm=TRUE),meanPopc=mean(PCTPOPCHA,na.rm=TRUE))#%>%summarise(meanPopc=mean(PCTPOPCHA,na.rm=TRUE))%>%arrange(desc(meanPop))
str(bg1)
colnames(bg1)[1]<-"cl"
class(bg1)
plot_ly(bg1,
x = ~cl,
y = ~meanPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
clusterDataSelection<-reactive({
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
input$groups2
input$groups3
input$groups4
input$groups11
if(clusterNum=="CL2"){
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL2)
}else{
bgsdt<-subset(blockgroups@data, CL2 %in% input$groups2)%>%group_by(CL2)
}
}else if(clusterNum=="CL3"){
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% input$groups3)%>%group_by(CL3)
}
}else if(clusterNum=="CL4"){
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL4)
}else{
bgsdt<-subset(blockgroups@data, CL4 %in% input$groups4)%>%group_by(CL4)
}
}else{
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL11)
}else{
bgsdt<-subset(blockgroups@data, CL11 %in% input$groups11)%>%group_by(CL11)
}
}
isolate({
bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(bgsdt)[1]<-"Groups"
})
})
clusterDataSelection()
clusterDataSelection<-function(clusterNum,vizmethod){
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
input$groups2
input$groups3
input$groups4
input$groups11
if(clusterNum=="CL2"){
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL2)
}else{
bgsdt<-subset(blockgroups@data, CL2 %in% input$groups2)%>%group_by(CL2)
}
}else if(clusterNum=="CL3"){
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% input$groups3)%>%group_by(CL3)
}
}else if(clusterNum=="CL4"){
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL4)
}else{
bgsdt<-subset(blockgroups@data, CL4 %in% input$groups4)%>%group_by(CL4)
}
}else{
if(vizmethod=="all"){
bgsdt<-blockgroups@data%>%group_by(CL11)
}else{
bgsdt<-subset(blockgroups@data, CL11 %in% input$groups11)%>%group_by(CL11)
}
}
bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(bgsdt)[1]<-"Groups"
}
clusterDataSelection()
clusterDataSelection<-function(clusterNum,vizmethod){
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL3"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% inputgroups3)%>%group_by(CL3)
}
}
bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(bgsdt)[1]<-"Groups"
}
clusterDataSelection("CL3","all")
df<-clusterDataSelection("CL3","all")
str(df)
df
clusterDataSelection<-function(clusterNum,vizmethod){
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL3"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% inputgroups3)%>%group_by(CL3)
}
}
colnames(bgsdt)[1]<-"Groups"
bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
}
df<-clusterDataSelection("CL3","all")
str(df)
df
head(bg)
selbg<-"CL3"
sel<-c("2","1","3","6","4","11")
all<-3
if(all=="11"){
bg<-blockgroups1@data%>%group_by(CL11)
}else{
bg<-subset(blockgroups1@data,CL11%in%sel)%>%group_by(CL11)
}
head(bg)
clusterDataSelection<-function(clusterNum,vizmethod){
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL3"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% inputgroups3)%>%group_by(CL3)
}
}
colnames(bgsdt)[1]<-"Groups"
bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
}
clusterDataSelection<-function(clusterNum,vizmethod){
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL3"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% inputgroups3)%>%group_by(CL3)
}
}
bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(bgsdt)[1]<-"Groups"
bgsdt
}
df<-clusterDataSelection("CL3","all")
str(df)
df<-clusterDataSelection("CL3","all")
df
clusterDataSelection<-function(clusterNum,vizmethod){
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL3"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% inputgroups3)%>%group_by(CL3)
}
}
df1<-bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(df1)[1]<-"Groups"
df1
}
df<-clusterDataSelection("CL3","all")
str(df)
df
clusterDataSelection("CL3","all")
plot_ly(clusterDataSelection("CL3","all"),
x = ~cl,
y = ~meanPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
plot_ly(clusterDataSelection("CL3","all"),
x = ~Groups,
y = ~meanPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
plot_ly(clusterDataSelection("CL3","all"),
x = ~Groups,
y = ~avgPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
plot_ly(clusterDataSelection("CL3","all"),
x = ~as.factor(Groups),
y = ~avgPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
clusterDataSelection<-function(clusterNum,vizmethod){
clusterNum<-"CL3" # CL2,3,4,11
vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL11"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL3)
}else{
bgsdt<-subset(blockgroups@data, CL3 %in% inputgroups3)%>%group_by(CL3)
}
}
df1<-bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(df1)[1]<-"Groups"
df1
}
clusterDataSelection("CL3","all")
clusterDataSelection<-function(clusterNum,vizmethod){
#  clusterNum<-"CL3" # CL2,3,4,11
#  vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL11"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL11)
}else{
bgsdt<-subset(blockgroups@data, CL11 %in% inputgroups3)%>%group_by(CL3)
}
}
df1<-bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(df1)[1]<-"Groups"
df1
}
clusterDataSelection("CL3","all")
clusterDataSelection("CL11","all")
plot_ly(clusterDataSelection("CL3","all"),
x = ~as.factor(Groups),
y = ~avgPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
blockgroups1<- readOGR("phl1328blkgs2010xy.geojson","OGRGeoJSON")
clusterDataSelection<-function(clusterNum,vizmethod){
#  clusterNum<-"CL3" # CL2,3,4,11
#  vizmethod<-"all" #all, manual
inputgroups3<-0
if(clusterNum=="CL11"){
if(vizmethod=="all"){
bgsdt<-blockgroups1@data%>%group_by(CL11)
}else{
bgsdt<-subset(blockgroups@data, CL11 %in% inputgroups3)%>%group_by(CL3)
}
}
df1<-bgsdt%>%summarise(avgPopd=mean(POP15DEN,na.rm=TRUE),avgPopc=mean(PCTPOPCHA,na.rm=TRUE),
avgCt15=mean(PCTCTLT15,na.rm=TRUE),avgCt1540=mean(PCTCT1540,na.rm=TRUE),avgCt40=mean(PCTCTMT40,na.rm=TRUE),
avgPt=mean(PCTPT,na.rm=TRUE),avgMbw=mean(PCTMBW,na.rm=TRUE),avgCar=mean(PCTCAR,na.rm=TRUE))
colnames(df1)[1]<-"Groups"
df1
}
plot_ly(clusterDataSelection("CL3","all"),
x = ~as.factor(Groups),
y = ~avgPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
clusterDataSelection("CL11","all")
plot_ly(clusterDataSelection("CL11","all"),
x = ~as.factor(Groups),
y = ~avgPopd,
name = "Average Population Density",
type = "bar"
) %>% layout(yaxis = list(title = 'Avg. Pop/sq-mi'))
dfff<-clusterDataSelection("CL11","all")
t(dfff)
t<-t(dfff)
names(T)
names(t)
ncol(t)
colnames(t)[i]<-as.character(i)
for(i in 1:ncol(t)){
colnames(t)[i]<-as.character(i)
}
colnames(t)<-"1"
colnames(t)[1]<-"1"
colnames(t)[,1]<-"1"
colnames(t)[1]
class(t)
t<-as.data.frame(t)
colnames(t)[1]
t
for(i in 1:ncol(t)){
colnames(t)[i]<-as.character(i)
}
t
ggplot(data = t, aes(y = value, fill = value)) +
geom_bar()
ggplot(data = dfff, aes(x=avgCt15,y=Groups)) +
geom_bar()
ggplot(data = dfff, aes(x=avgCt15,y=Groups)) +
geom_bar(stat = "identity")
ggplot(data = dfff, aes(x=avgCt15,y=as.factor(Groups))) +
geom_bar(stat = "identity")
rawdata <- read.csv("F:/MUSA620_DataViz/MUSA-620-Week-7-master/MUSA-620-Week-7-master/taxiPickupsByHour.csv")
head(rawdata)
reduced <- filter(rawdata, lon > -74.26, lon < -73.69, lat > 40.47, lat < 40.92)
sorted <- arrange(reduced, desc(num_pickups))
head(sorted)
withHourLabel <- mutate(sorted, hour_label = paste("hour_",hour,sep = ""))
hourValueRemoved <- select(withHourLabel,lat,lon,num_pickups,hour_label)
wideFormat <- spread(hourValueRemoved, key=hour_label, value=num_pickups)
wideFormat
head(wideFormat)
melt(dfff, id=c("Groups","avgCt15","avgCt1540","avgCt40"))
library(reshape)
library(reshape2)
melt(dfff, id=c("Groups","avgCt15","avgCt1540","avgCt40"))
melt(dfff, id=c("Groups"))
ggplot(data = dfff, aes(y=value,x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")
dfff1<-melt(dfff, id=c("Groups"))
ggplot(data = dfff1, aes(y=value,x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")
dfff1<-melt(dfff[,c("Groups","avgCt15","avgCt1540","avgCt40")], id=c("Groups"))
dfff1
ggplot(data = dfff1, aes(y=value,x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")
ggplot(data = dfff1, aes(y=value,x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity",position="dodge")
ggplot(data = dfff1, aes(y=value,x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity",position="dodge")+
scale_fill_brewer(palette="Spectral")+labs(x="Group Id(s)", y="")+theme_minimal()+ theme(legend.position="none")+ scale_y_continuous(labels = percent)
ggplot(data = dfff1, aes(y=value/100,x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity",position="dodge")+
scale_fill_brewer(palette="Spectral")+labs(x="Group Id(s)", y="")+theme_minimal()+ theme(legend.position="none")+ scale_y_continuous(labels = percent)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity",position="dodge")+
scale_fill_brewer(palette="Spectral")+labs(x="Group Id(s)", y="")+theme_minimal()
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="Spectral")+labs(x="Group Id(s)", y="")+theme_minimal()
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="Spectral")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="none")+ scale_y_continuous(labels = percent)
library(scales)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="Spectral")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="none")+ scale_y_continuous(labels = percent)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="PuRd")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="none")+ scale_y_continuous(labels = percent)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="none")+ scale_y_continuous(labels = percent)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position=c(.5, .5))+ scale_y_continuous(labels = percent)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top+ scale_y_continuous(labels = percent)
library(scales)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top"+ scale_y_continuous(labels = percent)
library(scales)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")+ scale_y_continuous(labels = percent)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=variable)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")+ scale_y_continuous(labels = percent)+ scale_fill_discrete(name="Experimental\nCondition",
breaks=c("avgCt15", "trt1", "trt2"),
labels=c("Control", "Treatment 1", "Treatment 2"))
levels(dfff1$variable)[levels(dfff1$variable)=="avgCt15"] <- "rol"
dfff1
levels(dfff1$variable)[levels(dfff1$variable)=="avgCt15"] <- "<= 15min"
dfff1
levels(dfff1$variable)[levels(dfff1$variable)=="rol"] <- "<= 15min"
dfff1
levels(dfff1$variable)[levels(dfff1$variable)=="avgCt1540"] <- "15 - 40mins"
levels(dfff1$variable)[levels(dfff1$variable)=="rol"] <- "more than 40mins"
levels(dfff1$variable)[levels(dfff1$variable)=="avgCt1540"] <- "15 - 40mins"
dfff1
levels(dfff1$variable)[levels(dfff1$variable)=="avgCt40"] <- "more than 40mins"
dfff1
names(dfff1)[names(dfff1)=="variable"]  <- "Avg. commute time"
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill='Avg. commute time')) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")
names(dfff1)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=Avg. commute time)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill='Avg. commute time')) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill="Avg. commute time")) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")
library(scales)
names(dfff1)[names(dfff1)=="Avg. commute time"]  <- "Mean_Commute_Time"
names(dfff1)
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=Mean_Commute_Time)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")
ggplot(data = dfff1, aes(y=(value/100),x=as.factor(Groups),fill=Mean_Commute_Time)) +
geom_bar(stat = "identity")+
scale_fill_brewer(palette="BuPu")+labs(x="Group Id(s)", y="")+theme_minimal()+
theme(legend.position="top")+ scale_y_continuous(labels = percent)
nams(blockgroups1@data)
names(blockgroups1@data)
head(blockgroups1@data)
a<- blockgroups1[blockgroups1$GISJOINID == "G42010100110001",]
a
a@data
a$COUNTYFP10
a<- blockgroups1[blockgroups1$GISJOINID == "G42010100110001",]@data
a$COUNTYFP10
a
a$COUNTYFP10
a$COUNTYFP10[1]
class(a)
summary(blockgroups1@data)
ad<-blockgroups1@data
ad<-ad[which(ad$POP15DEN<15000),]
rnow(ad)
nrow(ad)
ad<-ad[which(ad$POP15DEN<1500000),]
nrow(ad)
ad<-blockgroups1@data
nrow(ad)
ad<-ad[which(ad$POP15DEN<1500000),]
nrow(ad)
ad<-blockgroups1@data
ad<-ad[which(ad$POP15DEN<150000),]
nrow(ad)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rmarkdown')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
